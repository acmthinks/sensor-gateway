#-----------------------------------------------------------------------------
# JSON Listener Example Properties
# This file documents all publicly available properties.
#-----------------------------------------------------------------------------

## Key:         authentication.enable
## Type:        string(true,false)
## Default:     false
## Description: Enable authentication of users.
#
# authentication.enable=false

## Key:         authentication.localhost.bypass.enable
## Type:        string(true,false)
## Default:     true
## Description: When connecting from the localhost, if the admin database contains no users, then the user is granted full administrative access.
#
# authentication.localhost.bypass.enable=true

## Key:         collection.informix.options
## Type:        array
## Default:     
## Description: Informix table options that should be specified when creating collections.
#
# This value is specified as an array of zero or more options to use in collection/table creation.  
# For example, ["crcols","erkey"] will automatically create collections with CRCOLS and ERKEY.
# Available options: "audit", "crcols", "erkey", "replcheck", "rowids", "vercols"
#
# collection.informix.options=

## Key:         command.blacklist
## Type:        array[string]
## Default:     
## Description: Blacklists commands by removing them from the command registry.
#
# This feature enables a listener administrator to reduce the surface area exposed to an attacker.
# A blacklisted command is removed from the command registry and therefore can never be called.
#
# command.blacklist=

## Key:         command.listDatabases.sizeStrategy
## Type:        string(compute,estimate,none,perDatabaseSpaces)
## Default:     { estimate: 1000 }
## Description: Configures the default size strategy used when running the 'listDatabases' command.
#
# command.listDatabases.sizeStrategy={ estimate: 1000 }

## Key:         compatible.maxBsonObjectSize.enable
## Type:        string(true,false)
## Default:     false
## Description: Enable Mongo-compatible maximum BSON object size.
# 
# Determines if the JSON Listener reports a maximum supported document (BSON object)
# size of 256 MiB (false) or Mongo's default of 16 MiB (true).
#
# compatible.maxBsonObjectSize.enable=false

## Key:         database.buffer.enable
## Type:        string(true,false)
## Default:     true
## Description: Enable creation of databases with buffering enabled.
#
# This option determines the default value when creating a new database.
#
# database.buffer.enable=true

## Key:         database.connection.strategy
## Type:        string(default,informix-mongodb-cr)
## Default:     default
## Description: The connection pool life cycle to use when connecting to a database.
#
# database.connection.strategy=default

## Key:         database.create.enable
## Type:        string(true,false)
## Default:     true
## Description: Enable creation of a database if it does not exist. 
#
# This option is provided to allow an administrator to disable the implicit  
# creation of new databases. When set to false only databases that were 
# previously created can be accessed.
#
# database.create.enable=true

## Key:         database.dbspace
## Type:        string
## Default:     rootdbs
## Description: The name of the Informix dbspace databases are to be created in 
##              when dbspace.strategy=fixed.
#
# Specify the dbspace all databases are to be created in when the 
# dbspace.strategy is "fixed".
#
# database.dbspace=rootdbs

## Key:         database.locale.default
## Type:        string
## Default:     en_US.utf8
## Description: The default locale to use when creating a new database.
#
# database.locale.default=en_US.utf8

## Key:         database.log.enable
## Type:        string(true,false)
## Default:     true
## Description: Enable creation of databases with logging enabled.
#
# database.log.enable=true

## Key:         database.share.enable
## Type:        string(true,false)
## Default:     true
## Description: Enable sharing of DB objects and associated resources, such as connection pools, between sessions.
#
# database.share.enable=true

## Key:         database.share.close.enable
## Type:        string(true,false)
## Default:     true
## Description: Enable closing of shared databases when the number of sessions using it drops to zero.
#
# database.share.close.enable=true

## Key:         db.authentication
## Type:        string (MONGODB-CR, INFORMIX-MONGODB-CR)
## Default:     MONGODB-CR
## Description: The algorithm used for listener client authentication.
#
# db.authentication=MONGODB-CR

## Key:         dbspace.strategy
## Type:        string(autolocate, fixed)
## Default:     autolocate
## Description: The strategy used to determine the location of newly created databases, 
#               tables, and indexes.
#
# Specify the dbspace strategy for when new databases are created.
#   autolocate - have the Informix server automatically choose the dbspace for the new 
#                databases, tables, and indexes
#   fixed - use a specific dbspace as specified by the database.dbspace property
#
# dbspace.strategy=autolocate

## Key:         delete.preparedStatement.cache.enable
## Type:        string(true,false)
## Default:     true
## Description: Enable caching of prepared statements used to delete documents.
#
# delete.preparedStatement.cache.enable=true

## Key:         documentIdAlgorithm
## Type:        string(ObjectId,SHA-1,SHA-256,SHA-512,PassThrough)
## Default:     ObjectId
## Description: The algorithm used to compute the document id for use during replication.
#
# documentIdAlgorithm=ObjectId

## Key:         fragment.count
## Type:        integer(0:)
## Default:     0
## Description: The default number of fragments to use when creating a collection (table).
#
# fragment.count=0

## Key:         include
## Type:        string
## Default:     
## Description: The path to the properties file to include the entries from.
#
# The path can be absolute or relative. 
#
# include=

## Key:         index.cache.enable
## Type:        string(true,false)
## Default:     true
## Description: Enable caching of indexes on collections.
#
# index.cache.enable=true

## Key:         index.cache.update.interval
## Type:        integer(1:)
## Default:     120
## Description: The number of seconds between updates of the cache of the indexes on a collection (table).
#
# index.cache.update.interval=120

## Key:         insert.batch.enable
## Type:        string(true,false)
## Default:     true
## Description: Enable batching of document inserts (to collections)
#
# insert.batch.enable=true

## Key:         insert.batch.queue.enable
## Type:        string(true,false)
## Default:     false
## Description: Enable automatic queueing of inserts into larger batches to improve insert performance with some loss of durability.
#
# insert.batch.queue.enable=false

## Key:         insert.batch.queue.flush.interval
## Type:        integer(1:)
## Default:     100
## Description: The number of milliseconds between flushes of the insert queue to Informix.
#
# insert.batch.queue.flush.interval=100

## Key:         insert.preparedStatement.cache.enable
## Type:        string(true,false)
## Default:     true
## Description: Enable caching of prepared statements used to insert documents.
#
# insert.preparedStatement.cache.enable=true

## Key:         jdbc.afterNewConnectionCreation
## Type:        string or array of strings
## Default:     ""
## Description: Define one or more SQL commands to run after a new connection to the database is created.
# 
# For example, 
# jdbc.afterNewConnectionCreation="SET ENVIRONMENT USE_DWA 'ACCELERATE ON'"
# or 
# jdbc.afterNewConnectionCreation=["SET ENVIRONMENT USE_DWA 'ACCELERATE ON'", "SET PDQPRIORITY 80"]
#
# jdbc.afterNewConnectionCreation=""

## Key:         listener.admin.ipAddress
## Type:        string
## Default:     127.0.0.1
## Description: Specifies the IP address that is to be regarded by the listener as the administrative host.
#
# Warning: Assigning a value other than the loopback IP address to this
# property may allow for remote privilege escalation where an 
# attacker can obtain administrative privileges without knowledge
# of any user's password.
#
# listener.admin.ipAddress=127.0.0.1

## Key:         listener.authentication.timeout
## Type:        integer(0:)
## Default:     0
## Description: The number of milliseconds a client connection to the listener can be unauthenticated before it is closed.
#
# listener.authentication.timeout=0

## Key:         listener.hostName
## Type:        string
## Default:     localhost
## Description: The host name of the JSON listener.
#
# This determines the network adapter/interface that the listener binds the server socket to.
# If set to *, the listener will bind to all interfaces/addresses. 
#
listener.hostName=*

## Key:         listener.http.accessControlAllowCredentials
## Type:        string(true,false)
## Default:     true
## Description: Indicates whether the response to the request can be exposed when the omit credentials flag is unset. When this parameter is part of the response to a preflight request it indicates that the actual request can include user credentials.
#
#  http://www.w3.org/TR/cors/#access-control-allow-credentials-response-header
#
# listener.http.accessControlAllowCredentials=true

## Key:         listener.http.accessControlAllowHeaders
## Type:        string
## Default:     [ "accept" , "cursorId" , "content-type" ]
## Description: Indicates, as part of the response to a preflight request, which header field names can be used during the actual request.
#
# The value is specified using a JSON array-of-strings. Each string in the array
# is the case-insensitive name of a header that can be sent. For example, 
# to allow the headers foo and bar in a request:
# listener.http.accessControlAllowHeaders=["foo","bar"]
#
# http://www.w3.org/TR/cors/#access-control-allow-headers-response-header
#
# listener.http.accessControlAllowHeaders=[ "accept" , "cursorId" , "content-type" ]

## Key:         listener.http.accessControlAllowMethods
## Type:        string
## Default:     [ "GET" , "PUT" , "POST" , "DELETE" , "OPTIONS" ]
## Description: Indicates, as part of the response to a preflight request, which methods can be used during the actual request.
#
# The value is specified using a JSON array-of-strings. Each string in the array
# is the name of a HTTP method that is allowed.
#
# http://www.w3.org/TR/cors/#access-control-allow-methods-response-header
#
# listener.http.accessControlAllowMethods=[ "GET" , "PUT" , "POST" , "DELETE" , "OPTIONS" ]

## Key:         listener.http.accessControlAllowOrigin
## Type:        string
## Default:     { "$regex" : ".*" }
## Description: Indicates the host(s) allowed to receive responses from a HTTP listener when performing cross-origin resource sharing (CORS) requests.
#
# Background
# HTTP requests include an Origin header that specifies the uniform resource
# identifier (URI) that served the resource that is being used to perform the 
# request. When a resource from a different origin attempts to access
# a resource, the resource's origin is validated to determine if the
# requested resource should be shared.
#
# Property Processing
# 1) If the value is unspecified, any Origin will be allowed to perform a CORS request.
# 2) If the value is a string, the request's Origin header must match the value exactly.
#    A valid JSON string must be enclosed in single or double-quotes. For example:
#    listener.http.accessControlAllowOrigin="http://localhost"
# 3) If the value is a regular expression, the request's Origin header must 
#    match the regular expression. For example, to limit access to all hosts
#    in the sub-net 10.168.8.0/24:
#    listener.http.accessControlAllowOrigin={ "$regex" : "^http://10\\\\.168\\\\.8\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])$" }
#    The rule above is done is a very precise manner and not only checks the 
#    first 3 segments for being 10, 168, and 8, but also ensures that the 
#    4th segment is a value between 1 and 255. Here is a less-verbose but 
#    nearly equivalent rule:
#    listener.http.accessControlAllowOrigin={ "$regex" : "^http://10\\\\.168\\\\.8\\\\.\\\\d+$" }
#    Rather than value in the 4th segment be strictly be between 1 and 255, 
#    the rule above simply requires that the 4th segment consist of
#    one or more digits.
# 4) If the value is an array, each element in the array is processed using rules 2 and 3.
#
# http://www.w3.org/TR/cors/#access-control-allow-origin-response-header
#
# listener.http.accessControlAllowOrigin={ "$regex" : ".*" }

## Key:         listener.http.accessControlExposeHeaders
## Type:        string
## Default:     ["cursorId"]
## Description: Indicates the headers that are safe to expose to the API of a CORS request.
#
# The value is specified using a JSON array-of-strings. Each string in the array
# is the case-insensitive, name of a header that can be exposed. For example, 
# to expose the headers foo and bar to a client:
# listener.http.accessControlExposeHeaders=["foo","bar"]
#
# http://www.w3.org/TR/cors/#access-control-expose-headers-response-header
#
# listener.http.accessControlExposeHeaders=["cursorId"]

## Key:         listener.http.headers
## Type:        string
## Default:     
## Description: A JSON document of key-value string pairs that are placed in the HTTP headers of all responses.
#
# As an example, to put the following HTTP headers in all responses:
#  Access-Control-Allow-Origin : http://192.168.0.1 
#  Access-Control-Allow-Credentials : true
# use the following JSON document:
#  { "Access-Control-Allow-Origin" : "http://192.168.0.1" , "Access-Control-Allow-Credentials" : "true" } 
#
# listener.http.headers=

## Key:         listener.idle.timeout
## Type:        integer(0:)
## Default:     0
## Description: The number of milliseconds a client connection to the listener can be idle before it is forcibly closed.
#
# This is an advanced feature and changing the value from the default should not be taken lightly.
# When set to a non-zero value, this will cause the listener socket used to communicate with a Mongo client
# to be forcibly closed if it is idle for longer than the specified time. To the client, this will appear as an
# unexpected disconnection from the server the next time they attempt to write to the socket. This feature was
# added so that clients that are idle for a very long time can have their connection closed and the associated
# resources freed to be used by others.
#
# listener.idle.timeout=0

## Key:         listener.input.buffer.size
## Type:        integer(1:)
## Default:     8192
## Description: The size of the input buffer for each listener socket.
#
# listener.input.buffer.size=8192

## Key:         listener.memoryMonitor.enable
## Type:        string(true,false)
## Default:     true
## Description: If enabled the memory monitor will be enabled after starting this listener.
#
# listener.memoryMonitor.enable=true

## Key:         listener.memoryMonitor.allPoint
## Type:        integer(0:)
## Default:     80
## Description: When the heap usage (percentage) is below this value, no reduction in resources will be performed by the memory monitor.
#
# listener.memoryMonitor.allPoint=80

## Key:         listener.memoryMonitor.diagnosticPoint
## Type:        integer(0:)
## Default:     99
## Description: The heap usage percentage at or above which diagnostic information about memory usage will be logged.
#
# listener.memoryMonitor.diagnosticPoint=99

## Key:         listener.memoryMonitor.zeroPoint
## Type:        integer(0:)
## Default:     95
## Description: The heap usage percentage at or above which the memory monitor will have reduced resource usage to the lowest possible levels.
#
# listener.memoryMonitor.zeroPoint=95

## Key:         listener.onException
## Type:        string(reply,closeSession,shutdownListener)
## Default:     reply
## Description: An ordered list of action(s) to be taken when an exception occurs during the processing of a request (message) that was not caught by the request processing layer.
#
# listener.onException=reply

## Key:         listener.output.buffer.size
## Type:        integer(1:)
## Default:     8192
## Description: The size of the output buffer for each listener socket.
#
# listener.output.buffer.size=8192

## Key:         listener.pool.admin.enable
## Type:        string(true,false)
## Default:     false
## Description: Enables a separate thread pool exclusively for connections from the administrative IP address.
#
# When enabled, a separate thread pool is be created for the exclusive 
# use of connections from the administrative IP address. This ensures
# that even if the listener thread pool has exhausted all thread resources,
# a separate pool is available that has a cache of unused threads that
# can service requests from the administrator.
#
# listener.pool.admin.enable=false

## Key:         listener.pool.keepAliveTime
## Type:        integer(0:)
## Default:     60
## Description: The number of seconds that threads above the core pool size are allowed to idle before being removed.
#
# listener.pool.keepAliveTime=60

## Key:         listener.pool.queue.size
## Type:        integer
## Default:     0
## Description: The size of the queue used to queue requests after the core pool size has been reached.
#
# Special values:
#  -1 = unlimited queue size
#   0 = no queue
#
# In the default configuration there is no queueing done of tasks. All new 
# sessions will either be immediately executed on on available or new thread 
# up to the maximum pool size or will be instantly rejected if the maximum
# pool size has been reached.
#
# listener.pool.queue.size=0

## Key:         listener.pool.size.core
## Type:        integer(1:)
## Default:     128
## Description: 
#
# The maximum sustained size of the thread/socket pool listening for incoming connections from mongo clients. 
#
# listener.pool.size.core=128

## Key:         listener.pool.size.maximum
## Type:        integer(1:)
## Default:     1024
## Description: The maximum thread pool size.
#
# The maximum peak size of the thread/socket pool listening for incoming connections from mongo clients
#
# listener.pool.size.maximum=1024

## Key: listener.port
## Type: integer(1:65535)
## Default: 27017
## Description: The port number to listen on for incoming connections from mongo clients.
#
# Use of a port number below 1024 may require additional operating system privileges 
# be granted to the user starting the JSON listener.
#
# listener.port=27017

## Key:         listener.socket.accept.timeout
## Type:        integer(0:)
## Default:     1024
## Description: The number of milliseconds the server socket will wait on accept() before timing out.
#
# Note: This can impact how long it takes for a shutdown to complete.
#
# listener.socket.accept.timeout=1024

## Key:         listener.socket.backlog
## Type:        integer
## Default:     0
## Description: 
#
# listener.socket.backlog=0

## Key:         listener.socket.read.timeout
## Type:        integer(1:)
## Default:     1024
## Description: The number of milliseconds to block when calling read() on the InputStream associated with a socket.
#
# When set to a non-zero value, this enables the SO_TIMEOUT feature of a Socket.
# A timeout of zero is interpreted as an infinite timeout. If set to zero, it may not be possible to
# shutdown the listener as the thread(s) polling the socket(s) may never become unblocked and will
# therefore never be able to determine that they should exit.
#
# listener.socket.read.timeout=1024

## Key:         listener.ssl.algorithm
## Type:        string
## Default:     
## Description: Specifies the Service Provider Interface (SPI) for the KeyManagerFactory used to access the keystore.
#
# If you are unfamiliar with the JCE, you should not specify this property.
#
# On an Oracle (Sun) JVM, this value is typically SunX509.
# On an IBM JVM, this value is typically IbmX509.
#
# listener.ssl.algorithm=

## Key:         listener.ssl.ciphers
## Type:        string
## Default:     
## Description: A comma-delimited list of enabled SSL/TLS ciphers.
#
# If you are unfamiliar with the JCE and the security implications of the
# multitude of supported ciphers, you should not specify this property.
# Please consult with a security expert for an up-to-date recommendation
# based on your use case.
#
# If no value is specified, the JVM's default list of enabled ciphers will be used.
# If specified, the value should be a comma-delimited list of SSL/TLS cipher identifiers.
# The line below shows an example of a valid value:
# TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_EMPTY_RENEGOTIATION_INFO_SCSV
#
# One or more space characters can be present before/after the cipher identifier.
#
# listener.ssl.ciphers=

## Key:         listener.ssl.enable
## Type:        string(true,false)
## Default:     false
## Description: Enables SSL support on the socket accepting client connections for this listener.
#
# listener.ssl.enable=false

## Key:         listener.ssl.key.alias
## Type:        string
## Default:     
## Description: The alias (identifier) of the entry in the keystore to be used.
#
# If the keystore contains a single entry, this value does not need be set,
# regardless of a key password being specified.
# If the keystore contains more than one entry and a key password has been
# specified (contrast with the keystore password), this value should be
# used to specify the entry to unlock using the key password.
#
# listener.ssl.key.alias=

## Key:         listener.ssl.key.password
## Type:        string
## Default:     
## Description: The password used to unlock an entry in the keystore.
#
# If the entry to be used in the keystore has been assigned a password
# different from that of the keystore, this property should set to 
# that password.
# If this value is not specified, the listener will attempt to unlock the 
# entry using the keystore password.
#
# listener.ssl.key.password=

## Key:         listener.ssl.keyStore.file
## Type:        string
## Default:     
## Description: The fully-qualified path to the Java KeyStore file.
#
# While not a requirement, a Java KeyStore typically has the file extension 'jks'.
#
# listener.ssl.keyStore.file=

## Key:         listener.ssl.keyStore.password
## Type:        string
## Default:     
## Description: The password used to unlock the Java KeyStore.
#
# listener.ssl.keyStore.password=

## Key:         listener.ssl.keyStore.type
## Type:        string
## Default:     JKS
## Description: The provider identifier for the keystore SPI.
#
# If you are unfamiliar with the JCE, you should not specify this property.
#
# listener.ssl.keyStore.type=JKS

## Key:         listener.ssl.protocol
## Type:        string
## Default:     TLS
## Description: A JSON-array of strings specifying the enabled SSL/TLS protocols.
#
# Example values:
# SSL
# TLS
# SSL_TLS
# SSLv2Hello
# TLSv1
# TLSv1.1
# TLSv1.2
# SSLv3 
#
# listener.ssl.protocol=TLS

## Key:         listener.start.enable
## Type:        string(true,false)
## Default:     true
## Description: If set to false and the listener configuration file is auto-discovered, the listener will not be started.
#
# If the listener configuration file is explicitly specified, such as 
# via the -config flag, that listener will be started regardless of 
# this property's value being true or false.
#
# listener.start.enable=true

## Key:         listener.type
## Type:        string(mongo,rest)
## Default:     mongo
## Description: The type of listener to start.
#
# A mongo listener supports clients that use the Mongo driver protocol.
# A rest listener supports clients that use REST over HTTP.
#
listener.type=rest

## Key:         mongo.api.version
## Type:        string
## Default:     2.4
## Description: MongoDB API version that should define the listener responses. 
# 
# Specifies the MongoDB version that listener responses should be compatible with. Options are "2.4", "2.6", or "3.0".
#
# mongo.api.version=2.4

## Key:         pool.idle.timeout
## Type:        integer(1:)
## Default:     60
## Description: The minimum time an idle connection will remain in the idle pool before being closed.
#
# pool.idle.timeout=60

## Key:         pool.idle.timeunit
## Type:        string(NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS)
## Default:     SECONDS
## Description: The unit of time used to scale the pool idle timeout.
#
# pool.idle.timeunit=SECONDS

## Key:         pool.connections.maximum
## Type:        integer(1:)
## Default:     50
## Description: The maximum number of connections to a database that can be simultaneously active.
#
# pool.connections.maximum=50

## Key:         pool.lenient.return.enable
## Type:        string(true,false)
## Default:     false
## Description: When true, the checks performed on the connection being returned that would otherwise result in an exception being thrown are suppressed.
#
# The checks that are suppressed are:
# 1) An attempt to return a pooled connection that was already returned.
# 2) An attempt to return a pooled connection that is owned by another pool.
# 3) An attempt to return a pooled connection that is not of the proper type.
#
# pool.lenient.return.enable=false

## Key:         pool.lenient.dispose.enable
## Type:        string(true,false)
## Default:     false
## Description: When true, the checks that are performed on a connection being disposed that would otherwise result in an exception being thrown are suppressed.
#
# pool.lenient.dispose.enable=false

## Key:         pool.semaphore.timeout
## Type:        integer(1:)
## Default:     5
## Description: The amount of time to wait to acquire a permit for a database connection.
#
# The basic and advanced connection pools use a semaphore to limit the maximum 
# number of active connections. When all permits have been granted, any 
# additional permit requests wait this amount of time before failing.
#
# pool.semaphore.timeout=5

## Key:         pool.semaphore.timeunit
## Type:        string(NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS)
## Default:     SECONDS
## Description: The unit of time used to scale the pool semaphore timeout.
#
# pool.semaphore.timeunit=SECONDS

## Key:         pool.service.interval
## Type:        integer(1:)
## Default:     30
## Description: The amount of time between scans of the idle connection pool for connections that should be timed out.
#
# This determines the amount of time between scans of the idle connection
# pool for connections that have exceeded their maximum idle time and should
# therefore be closed.
#
# pool.service.interval=30

## Key:         pool.service.shared
## Type:        string(true,false)
## Default:     true
## Description: When true, all connections pools that uses threads for maintenance will share a common pool.
#
# pool.service.shared=true

## Key:         pool.service.timeunit
## Type:        string(NANOSECONDS,MICROSECONDS,MILLISECONDS,SECONDS,MINUTES,HOURS,DAYS)
## Default:     SECONDS
## Description: The unit of time used to scale the pool service interval.
#
# pool.service.timeunit=SECONDS

## Key:         pool.service.threads
## Type:        integer(1:)
## Default:     1
## Description: The number of threads used for maintenance of connection pools that share a common service thread pool.
#
# pool.service.threads=1

## Key:         pool.size.all
## Type:        integer(0:)
## Default:     0
## Description: 
#
# pool.size.all=0

## Key:         pool.size.initial
## Type:        integer(0:)
## Default:     0
## Description: The initial size of the idle connection pool.
#
# pool.size.initial=0

## Key:         pool.size.minimum
## Type:        integer(0:)
## Default:     0
## Description: The minimum size of the idle connection pool.
#
# pool.size.minimum=0

## Key:         pool.size.maximum
## Type:        integer(1:)
## Default:     50
## Description: The maximum size of the idle connection pool.
#
# pool.size.maximum=50

## Key:         pool.size.parallel.enable
## Type:        integer(0:)
## Default:     0
## Description: 
#
# pool.size.parallel.enable=0

## Key:         pool.size.parallel.threads
## Type:        integer(0:)
## Default:     0
## Description: 
#
# pool.size.parallel.threads=0

## Key:         pool.size.zero
## Type:        integer(0:)
## Default:     0
## Description: 
#
# pool.size.zero=0

## Key:         pool.threadMonitoring.enable
## Type:        string(true,false)
## Default:     false
## Description: Enable monitoring of thread-related statistics, such as lock wait times.
#
# This is an advanced debugging/tuning feature and should only be enabled when directed to by
# IBM support.
#
# pool.threadMonitoring.enable=false

## Key:         pool.type
## Type:        string(none,basic,advanced,threadLocal)
## Default:     basic
## Description: The type of pool to use for JDBC connections.
# 
# The available pool types are: 
#  - none --  no thread pooling, use only for debugging as performance will be significantly impaired
#  - basic -- thread pool maintenance of idle threads is performed each time a connection is returned
#  - advanced -- thread pool maintenance is performed by a separate thread
#  - threadLocal -- each thread is allocated a connection for its exclusive use
#
# pool.type=basic

## Key:         pool.typeMap.strategy
## Type:        string(clone,copy,share)
## Default:     copy
## Description: The strategy to use when distributing and synchronizing the JDBC type map for each connection in the pool.
#
# The available type map strategies are:
#  - clone -- a clone of the connection pool type map is made for every connection
#  - copy  -- a copy of the connection pool type map is made/maintained for every connection
#  - share -- a single type map is shared between all connections, this should only be used with a thread-safe type map
#
# pool.typeMap.strategy=copy

## Key:         preparedStatement.cache.enable
## Type:        string(true,false)
## Default:     true
## Description: Enable the use of a prepared statement cache.
#
# preparedStatement.cache.enable=true

## Key:         preparedStatement.cache.size
## Type:        integer(1:)
## Default:     20
## Description: The size of the LRU map used to cache prepared statements.
#
# preparedStatement.cache.size=20

## Key:         response.documents.count.default
## Type:        integer(1:)
## Default:     100
## Description: The default number of documents contained in a single response to a query.
#
# response.documents.count.default=100

## Key:         response.documents.count.maximum
## Type:        integer(1:)
## Default:     100000
## Description: The maximum number of documents contained in a single response to a query.
#
# This property limits the number of documents in a response, and therefore limits the
# potential resource consumption.
#
# response.documents.count.maximum=100000

## Key:         response.documents.size.maximum
## Type:        integer(1:)
## Default:     1048576
## Description: The maximum total size of all documents contained in a single response to a query, in bytes.
#
# response.documents.size.maximum=1048576

## Key:         response.documents.size.minimum
## Type:        integer(1:)
## Default:     65536
## Description: The lower threshold, in bytes, of the maximum response size to be set by the low memory monitor.
#
# This property has no effect if the low memory monitor is disabled or the
# or the heap size is sufficiently small to not necessitate a reduction in 
# the response size.
#
# response.documents.size.minimum=65536

## Key:         sasl.iterationCount
## Type:        integer(1:)
## Default:     10000
## Description: The number of iterations of the hashing function to be applied to the user's password.
#
# sasl.iterationCount=10000

## Key:         security.sql.passthrough
## Type:        string(true,false)
## Default:     false
## Description: Enable use of SQL statements through JSON documents
#
# security.sql.passthrough=false

## Key:         sharding.enable
## Type:        string(true,false)
## Default:     false
## Description: Enable use of sharding commands and sharded queries.
#
# sharding.enable=false

## Key:         sharding.parallel.query.enable
## Type:        string(true,false)
## Default:     false
## Description: Enable use of parallel sharded queries.
#
# sharding.parallel.query.enable should be set to true if sharded parallel queries are enabled on the Informix 
# server environment through the setting of a unique SHARD_ID in the onconfig of each server in the sharded  
# cluster. Setting sharding.parallel.query.enable=true instructs the listener to write SQL queries in a way 
# to take advantage of the server's parallel sharded query support. sharding.parallel.query.enable is only 
# applicable if sharding.enable is also set to true.
#
# sharding.parallel.query.enable=false

## Key:         update.client.strategy
## Type:        string(deleteInsert, updatableCursor)
## Default:     updatableCursor
## Description: Determines how updates are sent to the server when the client does the update processing.
# 
# When the client (listener) does the update processing, it queries the server for the existing document
# and then performs the update to the document itself. This property allows you to configure how the 
# listener sends the updated document back to the server.
#  - deleteInsert - update is sent to the server as a delete of the original document and an insert for 
#		the updated one. This strategy is required if the collection is sharded.
#  - updatableCursor - update is sent to the server using an updatable cursor.
#
# update.client.strategy=updatableCursor

## Key:         update.mode
## Type:        string(client,mixed)
## Default:     client
## Description: Determines where document updates are processed
# 
# Determines where updates are processed:
#  - client (client only update processing)
#  - mixed (try server first, fall-back to client processing)
#
# update.mode=client

## Key:         update.one.enable
## Type:        string(true,false)
## Default:     false
## Description: Enable support for mongo-compatible single document updates.
# 
# Enable support for updating a single document when the update multi flag is false.
# Set this to true if you want Mongo compatibility for updating only a single row.
# Set this to false if you want always update all documents that match the update query condition.
#
# update.one.enable=false

## Key:         url
## Type:        string
## Default:     jdbc:informix-sqli://localhost:9088/sysmaster:INFORMIXSERVER=ids;USER=informix;PASSWORD=informix
## Description: The JDBC URL to use with the Informix SQLI driver to connect to the sysmaster database.
# 
# Common JDBC Flags:
#  - INFORMIXSERVER = the name of the instance to connect to
#  - USER = the user to connect as
#  - PASSWORD = the user's password
#  - LOGINTIMEOUT = the maximum number of milliseconds to poll the server port (socket) when establishing a connection
#  - INFORMIXCONTIME = the minimum number of seconds attempting to establish a connection to a database server
#  - INFORMIXCONRETRY = the maximum number of attempts to establish a connection to a database server after the initial attempt
#  - IFX_SOC_TIMEOUT = the maximum number of milliseconds to spend reading from the server port (socket) before the read is considered to have failed
#
url=jdbc:informix-sqli://localhost:9088/sysmaster:INFORMIXSERVER=0l_informix1210;USER=informix;PASSWORD=informix
